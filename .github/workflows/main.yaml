on: 
  push:
    branches: [ "main" ]
  pull_request: 
    branches: [ "main" ]

env:
  CONTAINER_NAME: aid-alert_backend

jobs:
  setup:
    runs-on: self-hosted
    name: Setup Docker container ground
    environment: Default
    outputs:
      container_existence: ${{ steps.get_container_info.outputs.available }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Check if container exists
        id: get_container_info
        run: |
          if [ "$(docker ps -a -q)" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi

  clean:
    runs-on: self-hosted
    name: Clean old container and build the new one.
    needs: setup
    if: ${{ needs.setup.outputs.container_existence }}
    steps:
      - name: Stop  old container
        run: docker stop $(docker ps -a -q)
      
      - name: Remove old container
        run: docker rm $(docker ps -a -q)
  
  build: 
    runs-on: self-hosted
    name: Build docker container.
    needs: 
      - setup
    steps:
      - name: Docker build
        run: docker build . --tag=$CONTAINER_NAME:${{ github.sha }}
  
  deploy:
    runs-on: self-hosted
    name: Deploy the new container.
    if: ${{ always() }}docker
    environment: Default
    needs:
      - build
      - clean
    steps:
      - name: Start new containers
        run: | 
          docker run \
          -e PORT=$PORT \
          -e ENVIRONMENT=$ENVIRONMENT \
          -e LOG_MODE=$LOG_MODE \
          -e LOG_FILE=$LOG_FILE \
          -e DATABASE_URL=$DATABASE_URL \
          -e DATABASE_URI_TYPE=$DATABASE_URI_TYPE \
          -e DATABASE_USER=$DATABASE_USER \
          -e DAATABASE_PASSWORD=$DATABASE_PASSWORD \
          -e DATABASE_NAME=$DATABASE_NAME \
          --name=$CONTAINER_NAME \
          -p 8080:8080 \
          --restart always
          --detach \
          $CONTAINER_NAME:$CONTAINER_VERSION
        env:
          PORT: ${{ vars.PORT }} 
          ENVIRONMENT: ${{ vars.ENVIRONMENT }} 
          LOG_MODE: ${{ vars.LOG_MODE }}
          LOG_FILE: ${{ vars.LOG_FILE }}
          DATABASE_URL: ${{ vars.DATABASE_URL }}
          DATABASE_URI_TYPE: ${{ vars.DATABASE_URI_TYPE }}
          DATABASE_USER: ${{ secrets.DATABASE_USER}}
          DAATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD}}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_ROOT_PASSWRD: ${{ secrets.DATABASE_ROOT_PASSWORD }}
          CONTAINER_VERSION: ${{ github.sha }}