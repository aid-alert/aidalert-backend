on: 
  push:
    branches: [ "main" ]
  pull_request: 
    branches: [ "main" ]

env:
  container_name: aid-alert_backend

jobs:
  setup:
    runs-on: self-hosted
    name: Setup Docker container ground
    environment: Default
    outputs:
      date: ${{ steps.get_date.outputs.date }}
      num_cont: ${{ steps.get_docker_info.outputs.num_cont }}
      container_existence: ${{ steps.get_container_info.outputs.existence }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set variable date
        run: echo "date=$(date +%s)" >> $GITHUB_OUTPUT
        id: get_date
      
      - name: Check if docker container exists
        id: get_docker_info
        run: echo "num_cont=$(docker ps | wc -l)" >> $GITHUB_OUTPUT
      
      - name: Check if container exists
        id: get_container_info
        run: |
          if [ "$(docker ps -a -q -f name=$container_name)" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi

  clean:
    runs-on: self-hosted
    name: Clean old container and build the new one.
    needs: setup
    #if: ${{ needs.setup.outputs.container_existence }}
    steps:
      - name: Stop  old container
        # run: docker stop $container_name
        run: docker stop $(docker ps -a -q)
      
      - name: Remove old container
        # run: docker rm $container_name
        run: docker rm $(docker ps -a -q)
        #if: needs.setup.outputs.num_cont > 1
  
  build: 
    runs-on: self-hosted
    name: Build docker container.
    needs: setup
    steps:
      - name: Docker build
        run: docker build . --tag=$container_name:${{ needs.setup.outputs.date }}
  
  deploy:
    runs-on: self-hosted
    name: Deploy the new container.
    needs:
      - setup
      - build
    steps:
      - name: Start new containers
        run: | 
          sh -c 'docker run \
          -e PORT=$PORT \
          -e ENVIRONMENT=$ENVIRONMENT \
          -e LOG_MODE=$LOG_MODE \
          -e LOG_FILE=$LOG_FILE \
          -e DATABASE_URL=$DATABASE_URL \
          -e DATABASE_URI_TYPE=$DATABASE_URI_TYPE \
          -e DATABASE_USER=$DATABASE_USER \
          -e DAATABASE_PASSWORD=$DATABASE_PASSWORD \
          -e DATABASE_NAME=$DATABASE_NAME \
          --name=$container_name \
          $container_name:$CONTAINER_VERSION'
        env:
          PORT: ${{ secrets.PORT || vars.PORT }} 
          ENVIRONMENT: ${{ secrets.ENVIRONMENT || vars.ENVIRONMENT }} 
          LOG_MODE: ${{ secrets.LOG_MODE || vars.LOG_MODE }}
          LOG_FILE: ${{ secrets.LOG_FILE || vars.LOG_FILE }}
          DATABASE_URL: ${{ secrets.DATABASE_URL || vars.DATABASE_URL }}
          DATABASE_URI_TYPE: ${{ secrets.DATABASE_URI_TYPE || vars.DATABASE_URI_TYPE }}
          DATABASE_USER: ${{ secrets.DATABASE_USER || vars.DATABASE_USER }}
          DAATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD || vars.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME || vars.DATABASE_NAME }}
          DATABASE_ROOT_PASSWRD: ${{ secrets.DATABASE_ROOT_PASSWORD || vars.DATABASE_ROOT_PASSWORD }}
          CONTAINER_VERSION: ${{ needs.setup.outputs.date }}